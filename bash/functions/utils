function with_each_file(){
 find "$1" -type f -print0 | xargs -0 "${@:2}"
}
add_function_help "with_each_file" "For each file in directory{1} execute command{2}"

# Create directory and move into it
mcd () {
    mkdir -p $1
    cd $1
}
add_function_help "mcd" "Create directory and move into it"

# Extract various file types
function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f $1 ] ; then
        # NAME=${1%.*}
        # mkdir $NAME && cd $NAME
        case $1 in
          *.tar.bz2)   tar xvjf ../$1    ;;
          *.tar.gz)    tar xvzf ../$1    ;;
          *.tar.xz)    tar xvJf ../$1    ;;
          *.lzma)      unlzma ../$1      ;;
          *.bz2)       bunzip2 ../$1     ;;
          *.rar)       unrar x -ad ../$1 ;;
          *.gz)        gunzip ../$1      ;;
          *.tar)       tar xvf ../$1     ;;
          *.tbz2)      tar xvjf ../$1    ;;
          *.tgz)       tar xvzf ../$1    ;;
          *.zip)       unzip ../$1       ;;
          *.Z)         uncompress ../$1  ;;
          *.7z)        7z x ../$1        ;;
          *.xz)        unxz ../$1        ;;
          *.exe)       cabextract ../$1  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "$1 - file does not exist"
    fi
fi
}
add_function_help "extract" "Extract various file types"

# Grep over processes
psg () {
  ps aux | grep -v grep | grep -i -e VSZ -e $1
}
add_function_help "psg" "Grep over running processes"

function publicip {
  res=$(curl -s checkip.dyndns.org | grep -Eo '[0-9\.]+')
  echo -e "Your public IP is: ${echo_bold_green} $res ${echo_normal}"
}
add_function_help "publicip" "Print public IP"

ff() {
  find $2 -type f -name $1
}
add_function_help "ff" "Find file{1} inside directory{2}"

# calculator: "? 3+13*3" will print 42
function ?() { 
  echo "$*" | bc -l; 
}
add_function_help "?" "Calculator"

# Run command silently
function quiet() { 
  $* &> /dev/null & 
}
add_function_help "quiet" "Run command silently"

# Creates a backup of a file
backup () {
  local filename=$1
  local filetime=$(date +%Y%m%d_%H%M%S)
  cp ${filename} ${filename}_${filetime}
}
add_function_help "backup" "Create a timestamped copy of a file"

# Within [] ^ means "not". So [^ -~] means characters not between space and ~. 
# So excluding control chars, this matches non ASCII characters, and is a more portable 
# though slightly less accurate version of [^\x00-\x7f] below. The \+ means 1 or more and 
# will get multibye characters to have a color shown around the complete character(s), 
# rather than interspersed in each byte, thus corrupting the multibyte sequence
nonascii() {
  LANG=C grep --color=always -n '[^ -~]\+' $1
}
add_function_help "nonascii" "Print nonascii characters of a file"